import firebase from "firebase/compat/app";
import "firebase/compat/firestore";
import 'firebase/firestore';
import { getPrice } from 'backend/yahoo-finance.jsw'
var admin = require("firebase-admin");


var serviceAccount = require("backend/secretStuff.json");


const firebaseConfig = {
  apiKey: "AIzaSyBiHEJip0aI_LnBBGgMM2ufxv_5MOfDlHo",
  authDomain: "investment-club-a702f.firebaseapp.com",
  projectId: "investment-club-a702f",
  storageBucket: "investment-club-a702f.appspot.com",
  messagingSenderId: "974519574723",
  appId: "1:974519574723:web:53107a56881743ef338276",
  measurementId: "G-RR6N02R821"
};

// The Firebase Admin SDK to access Cloud Firestore.

// Initialize the app with a service account, granting admin privileges
admin.initializeApp({
  credential: admin.credential.cert(serviceAccount),
  databaseURL: "https://investment-club-a702f.firebaseio.com"
});

firebase.initializeApp(firebaseConfig);

let db = admin.firestore();

//turn number into currency format
const formatter = new Intl.NumberFormat('en-US', {
  style: 'currency',
  currency: 'USD',
});

//reverse currency format to number
function deFormat(number) { return parseFloat(number.substring(1).replace(/,/g, ""));}

export async function getDoc(docRef) {
    // the use of promise let us resolve the data when the asynchronous call is finished
    return new Promise(resolve => {
        docRef.get()
            .then(function (doc) { 
                // When the document is retrieved, this function returns the document's data
                resolve(doc.data());
            })
        })
}

export async function addTeam(contest, name, userId, data) {
    //get data
    let pwd = data.pwd;
    
    const userRef = db.doc("spring2023/Users/users/" + userId);
    let teamData = {"pwd": pwd, "portfolio": {}, "history": [], "cash": "$100,000.00", "bp": "$100,000.00", "name": name, "users": [userRef] };

    //add team to collection
    db.collection("spring2023/Contests/contests/" + contest + "/teams")  
        .add(teamData)
        .then(function(docRef) {
            userRef.set( { "team_list": { [contest]: docRef.id } }, { merge: true } );
        });
}

export async function addUserToTeam(contest, userId, teamId) {
    let userRef = db.doc("spring2023/Users/users/" + userId);
    let teamRef = db.doc("spring2023/Contests/contests/" + contest + "/teams/" + teamId);

    let team = await getDoc(teamRef);
    console.log(teamRef);
    let users = team.users;
    users.push(userRef);

    await userRef.set( { "team_list": { [contest]: teamRef.id } }, { merge: true } );
    await teamRef.update( { "users": users } )
}

export async function getTeamId(userId, contest) {
    let userRef = db.collection("spring2023/Users/users").doc(userId);
    let user = await getDoc(userRef);
    try {
        let teamId = user.team_list[contest];
        if (teamId === undefined) throw Error;
        return teamId;
    } catch(e) {
        return -1;
    }
}

export async function getTeamData(teamId, contest) {
    let teamRef = db.collection("spring2023/Contests/contests/" + contest + "/teams").doc(teamId);
    let team = await getDoc(teamRef);
    return team;
}

export async function getRankData(contest) {
    let teamsRef = db.collection("spring2023/Contests/contests/" + contest +"/teams");
    let querySnapshot = await teamsRef.get();
    let teams = querySnapshot.docs.map(doc => doc.data());

    let ret = [];
    let ind = 0;
    teams.forEach(function(doc) {
        ret.push({"Place": ++ind, "Name": doc.name, "total_val": doc.total_val})
    })
    return ret;
}

export async function getPortVal(team) {
    let cash = deFormat(team.cash);
    let port = team.portfolio;

    //convert port to map
    const portMap = new Map(Object.entries(port));

    //go through port
    let total_asset = 0;
    for (let [ticker, curr] of portMap.entries()) {
        let curr = port[ticker];
        let qty = curr.qty;

        //get price from api
        let val = await getPrice(ticker);
        total_asset += qty*val;
    }

    //update total port value
    let new_total = cash + total_asset;
    return new_total;
}

export async function trade(teamId, data) {
    //get data about trade
    let action = data.action;
    let contest = data.contest
    let ticker = data.ticker;
    let qty = data.qty;
    let date = data.date;
    let price = data.price;
    
    //get team from user
    let teamRef = db.collection("spring2023/Contests/contests/" + contest + "/teams").doc(teamId);
    let team = await getDoc(teamRef);

    //get team data
    let port = team.portfolio;
    let cash = deFormat(team.cash);
    let bp = deFormat(team.bp);
    console.log(bp, cash);
    let hist = team.history;

    //update team's portfolio, dont need to do this to get stock

    if (action == "Buy") {
        // if buy back
        if (port[ticker] && port[ticker].qty < 0) {
            let cqty = -port[ticker].qty;
            qty = Math.min(qty, cqty);
            bp += qty*price/2;
            cash -= qty*price;

            if (qty != cqty) port[ticker] = {"qty": qty - cqty, "ticker": ticker, "trade_price": formatter.format(price), "date": date};
            else delete port[ticker];
        } else {
            if (qty*price > bp) {
                qty = Math.floor(bp/price);
                if (qty == 0) return false; //add to front end
            }

            bp -= qty*price;
            cash -= qty*price;

            if (!port[ticker]) port[ticker] = {"qty": qty, "ticker": ticker, "trade_price": formatter.format(price), "date": date};
            else port[ticker] = {"qty": qty + port[ticker].qty, "ticker": ticker, "trade_price": formatter.format(price), "date": date}
        }
    } else {
        // selling smth i currently have (not short)
         if (port[ticker] && port[ticker].qty > 0) {
            let cqty = port[ticker].qty;
            qty = Math.min(qty, cqty);
            bp += qty*price;
            cash += qty*price;

            if (qty != cqty) port[ticker] = {"qty": cqty - qty, "ticker": ticker, "trade_price": formatter.format(price), "date": date};
            else delete port[ticker];
        } else {
            if (qty*price > bp) {
                qty = Math.floor(bp/price);
                if (qty == 0) return false;
            }

            bp -= qty*price/2;
            cash += qty*price;

            if (!port[ticker]) port[ticker] = {"qty": -qty, "ticker": ticker, "trade_price": formatter.format(price), "date": date};
            else port[ticker] = {"qty": port[ticker].qty -qty, "ticker": ticker, "trade_price": formatter.format(price), "date": date}
        }
    }
    
    //update data
    hist.push({"ticker": ticker, "qty": qty, "action": action, "date": date});
    teamRef.update({"bp": formatter.format(bp), "cash": formatter.format(cash), "portfolio": port, "history": hist});

    return true;
}

export async function getTeams(contest) {
    let teamsRef = db.collection("spring2023/Contests/contests/" + contest + "/teams");
    let snapshot = await teamsRef.get();

    let ret = [];
    snapshot.forEach(doc => {
        let team = doc.data();
        ret.push({ "teamId": doc.id, "teamSize": team.users.length, "Name": team.name, "pwd": team.pwd, "port": team.port});
    })

    return ret;
}

export async function getTeamsData(contest) {
    let teamsRef = db.collection("spring2023/Contests/contests/" + contest + "/teams");
    let snapshot = await teamsRef.get();

    let ret = [];
    snapshot.forEach(doc => {ret.push({ "teamId": doc.id, "teamData": doc.data()});})
    return ret;
}
